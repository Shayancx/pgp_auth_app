#!/usr/bin/env ruby
# frozen_string_literal: true

require 'pg'
require 'securerandom'

def create_database_if_not_exists
  database_name = ENV.fetch('DATABASE_NAME', 'pgp_auth_app')
  
  begin
    # Try to connect to the database directly
    PG.connect(dbname: database_name)
    puts "✓ Database #{database_name} already exists"
  rescue PG::ConnectionBad
    # Database doesn't exist, create it
    begin
      conn = PG.connect(dbname: 'postgres')
      conn.exec("CREATE DATABASE #{database_name}")
      puts "✓ Created database #{database_name}"
    rescue PG::DuplicateDatabase
      puts "✓ Database #{database_name} already exists"
    ensure
      conn&.close
    end
  end
end

def setup_environment
  unless File.exist?('.env')
    puts "📝 Creating .env file..."
    File.write('.env', <<~ENV)
      DATABASE_URL=postgres://localhost/pgp_auth_app
      SESSION_SECRET=#{SecureRandom.hex(64)}
      RACK_ENV=development
    ENV
    puts "✓ Created .env file with secure session secret"
  else
    puts "✓ .env file already exists"
  end
end

# Main setup
puts "🚀 Setting up PGP Auth App..."

setup_environment
create_database_if_not_exists

# Run migrations
puts "📊 Running migrations..."
require_relative '../config/database'
require 'sequel'

Sequel.extension :migration
begin
  Sequel::Migrator.run(DB, 'db/migrate')
  puts '✓ Migrations completed successfully'
rescue => e
  puts "✗ Migration failed: #{e.message}"
  puts "Make sure PostgreSQL is running and accessible"
  exit 1
end

puts ""
puts "🎉 Setup complete!"
puts "Run './bin/dev' to start the development server"
